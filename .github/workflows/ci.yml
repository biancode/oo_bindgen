name: CI
on: [push, pull_request]
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        rust:
          - stable
          #- beta
          #- nightly
        profile:
          - Debug
          - Release
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: pwsh
    env:
      BUILD_TYPE: ${{ matrix.profile }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: x86_64-unknown-linux-musl
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Build
        run: cargo build
      - name: Run Rust unit tests
        run: cargo test
      - name: C bindings
        run: |
          Invoke-Expression "cargo run $(($Env:BUILD_TYPE -eq 'Release') ? '--release' : '') --bin foo-bindings -- --c"
      - name: .NET bindings
        run: |
          Invoke-Expression "cargo run $(($Env:BUILD_TYPE -eq 'Release') ? '--release' : '') --bin foo-bindings -- --dotnet"
      - name: Java bindings
        run: |
          Invoke-Expression "cargo run $(($Env:BUILD_TYPE -eq 'Release') ? '--release' : '') --bin foo-bindings -- --java"
  linting:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          #- beta
          #- nightly
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
      - name: Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
